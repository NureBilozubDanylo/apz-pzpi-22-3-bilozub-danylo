
Харківський національний університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії




ЗВІТ
з лабораторної роботи №4
з дисципліни «Архітектура програмного забезпечення»
на тему: «РОЗРОБКА МОБІЛЬНОГО КЛІЄНТА СИСТЕМИ»




Виконав 
ст. гр. ПЗПІ-22-3 
Білозуб Данило Владиславович

Перевірив 
ст. викладач кафедри ПІ 
Сокорчук Ігор Петрович





 
Харків 2025
1 ІСТОРІЯ ЗМІН

№ 	Дата	Версія звіту 	Опис змін та виправлень 
1 	25.05.2025	0.1 	Створено розділ «Історія змін» 
2 	25.05.2025	0.1 	Створено розділ «Завдання», Опис виконаної роботи» та «Висновки» 
3 	27.05.2025	0.1 	Заповнено додаток Б з графічними матеріалами 
4 	28.05.2025	0.1 	Заповнено додаток В з програмним кодом 
5 	30.05.2025	0.1 	Наведено посилання на відеозапис. Заповнено додаток А. 

2 ЗАВДАННЯ

Метою даного лабораторного заняття є розробка мобільної частини програмної системи.

3 ОПИС ВИКОНАНОЇ РОБОТИ

До виконаної роботи було створено відеозвіт, посилання на який наведено у додатку А. Усі графічні матеріали наведені у додатку Б. Код застосунку наведено у додатку В.
У ході виконання даної лабораторної роботи було створено мобільного клієнта для системи контролю роботи зоомагазину. Розробка здійснювалася мовою Kotlin у середовищі Android Studio.
Було реалізовано функціонал авторизації та реєстрації користувачів із розподілом на ролі: працівник, директор та адміністратор. Кожна роль має власний доступ до відповідних функцій системи.
Створено можливість управління мережею магазинів: додавання нових зоомагазинів та додавання тварин до кожного з них. При додаванні тварин система автоматично розраховує оптимальні кліматичні умови для їх утримання.
Реалізовано модуль роботи з сенсорами. Користувачі можуть створювати та переглядати список сенсорів, дані з яких автоматично надходять до системи. Значення попередньо обробляються: відсіюються некоректні або зайві показники, залишаючи лише релевантну інформацію.
Додано функціонал надсилання автоматичних повідомлень користувачам про необхідність зміни умов середовища (наприклад, температури або вологості) відповідно до оптимальних параметрів для конкретних тварин.
Особливу увагу було приділено адмініструванню системи. Для платформного адміністратора реалізовано панель моніторингу стану сервера. Адміністратор баз даних має доступ до списку таблиць у базі даних із можливістю перегляду обсягу пам’яті, який вони займають.

ВИСНОВКИ

У результаті виконання даної лабораторної роботи було розроблено мобільного клієнта для системи контролю роботи зоомагазину. Було реалізовано зручний інтерфейс для базових операцій, таких як управління магазинами, тваринами та сенсорами. Впроваджено бізнес-логіку автоматичного аналізу кліматичних умов та сповіщення користувачів у разі їх невідповідності. Також було реалізовано розмежування доступу відповідно до ролей користувачів та забезпечено підтримку адміністративних функцій для платформного та базового адміністрування. 



ДОДАТОК А
Відеозапис

Відеозапис презентації результатів лабораторної роботи: https://youtu.be/zkhreqFq8bc

Хронологічний опис відеозапису:
00:00 Вітання. 
00:15 Загальний функціонал. 
01:40 Функції бізнес логіки. 
05:20 Функції платформного адміністратора. 
05:40 Функції адміністратора баз даних.




ДОДАТОК Б 
Графічні матеріали

 
Рисунок Б.1 – ER-діаграма даних

 
Рисунок Б.2 – Структура бази даних

 
Рисунок Б.3 – UML-діаграма прецедентів

 
Рисунок Б.4 – UML-діаграма прецедентів (Частина 2)

 
Рисунок Б.5 – UML-діаграма прецедентів (Частина 3)

 
Рисунок Б.6 – UML-діаграма прецедентів (Частина 4)

 
Рисунок Б.7 – Uml діаграма взаємодії (послідовності) для створення нового користувача та його вхід в систему




ДОДАТОК В 
Програмний код

В.1 Математична обробка прикладних даних.

GitHub репозиторій: https://github.com/NureBilozubDanylo/apz-pzpi-22-3-bilozub-danylo/blob/main/Lab3/pzpi-22-3-bilozub-danylo-lab3/ZooShopHelper/app/crud/animal.py

1 def update_climate_settings(db: Session, shop_id: int):
2     animals = db.query(Animal).filter(Animal.shop_id == shop_id).all()
3     if animals:
4         temperatures = [float(a.temperature) for a in animals]
5         humidities = [float(a.humidity) for a in animals]
6         light_intensities = [float(a.light_intensity) for a in animals]
7         weights = [a.weight for a in animals]
8 
9         # Temperature: Weighted median
10         # Calculate the weighted average temperature
11         total_weight = sum(a.weight for a in animals)
12         if total_weight == 0:
13             weighted_median_temperature = 0  # Handle the case with no weight
14         else:
15             weighted_median_temperature = sum(a.temperature * a.weight for a in animals) / total_weight
16 
17 
18 
19         # Optimal humidity
20         humidities = [float(a.humidity) for a in animals]
21         high_humidity_animals = [a for a in animals if a.humidity > 75]
22 
23         if high_humidity_animals:
24             high_humidity_values = [float(a.humidity) for a in high_humidity_animals]
25             optimal_humidity = np.percentile(high_humidity_values, 75)
26         else:
27             lower_percentile = np.percentile(humidities, 25)
28             upper_percentile = np.percentile(humidities, 75)
29             optimal_humidity = (lower_percentile + upper_percentile) / 2
30 
31         # Optimal light intensity
32         light_intensities = [float(a.light_intensity) for a in animals]
33         max_light_intensity = max(light_intensities)
34         median_light_intensity = np.median(light_intensities)
35         optimal_light_intensity = min(max_light_intensity, median_light_intensity)
36 
37 
38         db_climate_settings = db.query(ClimateSettings).filter(ClimateSettings.shop_id == shop_id).first()
39         if db_climate_settings:
40             db_climate_settings.temperature = weighted_median_temperature
41             db_climate_settings.humidity = optimal_humidity
42             db_climate_settings.light_intensity = optimal_light_intensity
43             db_climate_settings.updated_at = datetime.now()
44         else:
45             new_climate_settings = ClimateSettingsCreate(
46                 temperature=weighted_median_temperature,
47                 humidity=optimal_humidity,
48                 light_intensity=optimal_light_intensity,
49                 updated_at=datetime.now(),
50                 shop_id=shop_id
51             )
52             db_climate_settings = ClimateSettings(**new_climate_settings.dict())
53             db.add(db_climate_settings)
54         
55         db.commit()
56         db.refresh(db_climate_settings)

В.2 Адміністрування бізнес-логіки системи. Платформний адміністратор.

GitHub репозиторій: https://github.com/NureBilozubDanylo/apz-pzpi-22-3-bilozub-danylo/blob/main/Lab3/pzpi-22-3-bilozub-danylo-lab3/ZooShopHelper/app/routers/admin_management.py


1 """
2 Адміністративні інструменти:
3   • System Admin   – конфіги, стани, логи
4   • Platform Admin – керування користувачами / компаніями
5   • DB Admin       – резервні копії, оптимізація БД
6 """
7 
8 import os, time, json, shutil, subprocess
9 from datetime import datetime
10 from pathlib import Path
11 from typing import Dict, List, Optional
12 
13 import psutil
14 import psycopg2
15 from fastapi import APIRouter, Depends, HTTPException, UploadFile, File, Form
16 from sqlalchemy import text
17 from sqlalchemy.orm import Session
18 
19 from app.database import SessionLocal, engine
20 from app.dependencies import get_current_admin_user
21 from app.crud import user as crud_user
22 from app.schemas.user import UserUpdate
23 from app.backup import backup_database
24 from app.dependencies import get_current_admin_user
25 from app.models.user import User
26 
27 router = APIRouter(prefix="/admin", tags=["Admin"])
28 
29 SYSTEM_CONFIG: Dict[str, str | int | bool] = {
30     "maintenance_mode": False,
31     "default_locale": "en",
32     "max_file_size_mb": 50,
33 }
34 START_TIME = time.time()
35 
36 LOG_PATH = Path("server.log")
37 START_TS = time.time()
38 
39 def get_db():
40     db = SessionLocal()
41     try:
42         yield db
43     finally:
44         db.close()
45 
46 def as_admin(user=Depends(get_current_admin_user)):
47     return user
48 
49 @router.post("/backup")
50 def manual_backup(current: User = Depends(get_current_admin_user)):
51     """Ручне резервне копіювання."""
52     try:
53         backup_database()        # існуюча функція
54         return {"status": "ok", "timestamp": datetime.utcnow()}
55     except Exception as e:
56         raise HTTPException(status_code=500, detail=str(e))
57 
58 
59 @router.get("/stats")
60 def server_stats(current: User = Depends(get_current_admin_user)):
61     """Повертає аптайм, CPU %, RAM та диск."""
62     uptime = time.time() - START_TIME
63     mem = psutil.virtual_memory()
64     disk = psutil.disk_usage("/")
65     return {
66         "uptime_sec": int(uptime),
67         "cpu_percent": psutil.cpu_percent(interval=0.2),
68         "ram_used_mb": int(mem.used / 1024 / 1024),
69         "ram_total_mb": int(mem.total / 1024 / 1024),
70         "disk_used_gb": round(disk.used / 1024**3, 1),
71         "disk_total_gb": round(disk.total / 1024**3, 1),
72     }
73 
74 
75 @router.get("/system/status")
76 def system_status(_: str = Depends(as_admin)):
77     """CPU, RAM, диск та аптайм."""
78     uptime = int(time.time() - START_TS)
79     mem = psutil.virtual_memory()
80     disk = psutil.disk_usage("/")
81     return {
82         "uptime_sec": uptime,
83         "cpu_percent": psutil.cpu_percent(interval=0.2),
84         "ram_used_mb": int(mem.used / 1024 / 1024),
85         "ram_total_mb": int(mem.total / 1024 / 1024),
86         "disk_used_gb": round(disk.used / 1024**3, 1),
87         "disk_total_gb": round(disk.total / 1024**3, 1),
88         "config": SYSTEM_CONFIG,
89     }
90 
91 @router.get("/system/config")
92 def get_config(_: str = Depends(as_admin)):
93     return SYSTEM_CONFIG
94 
95 @router.put("/system/config")
96 def update_config(changes: Dict[str, str | int | bool], _: str = Depends(as_admin)):
97     SYSTEM_CONFIG.update(changes)
98     return {"status": "updated", "config": SYSTEM_CONFIG}
99 
100 @router.get("/system/logs")
101 def get_logs(lines: int = 200, _: str = Depends(as_admin)):
102     """Повернути останні N рядків лог-файлу."""
103     if not LOG_PATH.exists():
104         raise HTTPException(404, "log file not found")
105     with LOG_PATH.open("r", encoding="utf-8", errors="ignore") as f:
106         data = f.readlines()[-lines:]
107     return {"log": "".join(data)}
108 
109 @router.delete("/system/logs")
110 def clear_logs(_: str = Depends(as_admin)):
111     if LOG_PATH.exists():
112         LOG_PATH.write_text("")
113     return {"status": "cleared"}
114 
115 
116 
117 BACKUP_DIR = Path("db_backups")
118 BACKUP_DIR.mkdir(exist_ok=True)
119 
120 @router.post("/db/backup")
121 def create_backup(_: str = Depends(as_admin)):
122     ts = datetime.utcnow().strftime("%Y%m%d_%H%M%S")
123     backup_database()
124     return {"status": "backup_created", "timestamp": ts}
125 
126 @router.post("/db/restore")
127 def restore_backup(file: UploadFile = File(...),
128                    _: str = Depends(as_admin)):
129     """Приймає *.sql.gz або *.dump та відновлює БД."""
130     dst = BACKUP_DIR / file.filename
131     with dst.open("wb") as f:
132         shutil.copyfileobj(file.file, f)
133 
134     cmd = f'psql "{os.getenv("DATABASE_URL")}" -f "{dst}"'
135     subprocess.run(cmd, shell=True, check=True)
136     return {"status": "restored", "file": file.filename}
137 
138 @router.get("/admin/db/status")
139 def db_status(_: str = Depends(as_admin)):
140     with engine.connect() as conn:
141         results = conn.execute(text("""
142             SELECT
143                 table_name,
144                 pg_total_relation_size(quote_ident(table_name)) AS size
145             FROM information_schema.tables
146             WHERE table_schema = 'public'
147         """)).fetchall()
148 
149     total = sum(row.size for row in results)
150     return {
151         "tables": [{ "name": row.table_name, "size_bytes": row.size } for row in results],
152         "total_size_mb": round(total / 1024 / 1024, 2),
153     }
154 
155 @router.post("/admin/db/optimize")
156 def optimize_db(_: str = Depends(as_admin)):
157     conn = engine.raw_connection()
158     try:
159         conn.set_session(autocommit=True)
160         cur = conn.cursor()
161         cur.execute("VACUUM")
162         cur.close()
163     finally:
164         conn.close()
165     return {"status": "vacuum_ok"}

В.3 Адміністрування бізнес-логіки системи. Системний адміністратор.

GitHub репозиторій: https://github.com/NureBilozubDanylo/apz-pzpi-22-3-bilozub-danylo/blob/main/Lab3/pzpi-22-3-bilozub-danylo-lab3/ZooShopHelper/app/routers/admin_tools.py


1 from fastapi import APIRouter, Depends, HTTPException
2 from datetime import datetime, timedelta
3 from pathlib import Path
4 import psutil, os, shutil, time
5 import os, time, json, shutil, subprocess
6 from datetime import datetime
7 from pathlib import Path
8 from typing import Dict, List, Optional
9 
10 import psutil
11 import psycopg2
12 from fastapi import APIRouter, Depends, HTTPException, UploadFile, File, Form
13 from sqlalchemy import text
14 from sqlalchemy.orm import Session
15 
16 from app.database import SessionLocal, engine
17 from app.dependencies import get_current_admin_user
18 from app.crud import user as crud_user
19 from app.schemas.user import UserUpdate
20 from app.backup import backup_database
21 from app.dependencies import get_current_admin_user
22 from app.models.user import User
23 from app.dependencies import get_current_admin_user
24 from app.models.user import User
25 from app.backup import backup_database    # функція вже існує
26 
27 router = APIRouter(prefix="/admin", tags=["Admin"])
28 
29 # для аптайму
30 START_TIME = time.time()
31 
32 def get_db():
33     db = SessionLocal()
34     try:
35         yield db
36     finally:
37         db.close()
38 
39 def as_admin(user=Depends(get_current_admin_user)):
40     return user
41 
42 @router.put("/platform/users/{user_id}/role")
43 def set_user_role(user_id: int, new_role: str = Form(...),
44                   db: Session = Depends(get_db),
45                   _: str = Depends(as_admin)):
46     if new_role not in {"worker", "director", "admin"}:
47         raise HTTPException(400, "invalid role")
48     crud_user.update_user(db, user_id, UserUpdate(role=new_role))
49     return {"status": "ok", "user_id": user_id, "role": new_role}
50 
51 @router.post("/platform/users/{user_id}/logout")
52 def force_logout(user_id: int, db: Session = Depends(get_db), _: str = Depends(as_admin)):
53     user = crud_user.get_user(db, user_id)
54     if not user:
55         raise HTTPException(404, "User not found")
56     user.token = None  # або як у тебе реалізовані сесії
57     db.commit()
58     return {"status": "force_logged_out", "user_id": user_id}
59 
60 @router.delete("/platform/users/{user_id}")
61 def delete_user(user_id: int, db: Session = Depends(get_db), _: str = Depends(as_admin)):
62     user = crud_user.get_user(db, user_id)
63     if not user:
64         raise HTTPException(404, "User not found")
65 
66     db.execute(text("DELETE FROM \"Employees\" WHERE user_id = :uid"), {"uid": user_id})
67     db.commit()
68 
69     db.delete(user)
70     db.commit()
71 
72     return {"status": "deleted", "user_id": user_id}
73 
74 @router.patch("/platform/users/{user_id}/role")
75 def change_user_role(
76     user_id: int,
77     new_role: str = Form(...),
78     db: Session = Depends(get_db),
79     _: str = Depends(as_admin)
80 ):
81     if new_role not in {"worker", "director", "admin"}:
82         raise HTTPException(400, "Invalid role")
83     crud_user.update_user(db, user_id, UserUpdate(role=new_role))
84     return {"status": "updated", "user_id": user_id, "new_role": new_role}

В.4 Резервне копіювання користувацьких даних.

GitHub репозиторій: https://github.com/NureBilozubDanylo/apz-pzpi-22-3-bilozub-danylo/blob/main/Lab3/pzpi-22-3-bilozub-danylo-lab3/ZooShopHelper/app/backup.py

1 from fastapi import APIRouter, Depends, HTTPException
2 from datetime import datetime, timedelta
3 from pathlib import Path
4 import psutil, os, shutil, time
5 
6 from app.dependencies import get_current_admin_user
7 from app.models.user import User
8 from app.backup import backup_database    # функція вже існує
9 
10 router = APIRouter(prefix="/admin", tags=["Admin"])
11 
12 # для аптайму
13 START_TIME = time.time()
14 
15 @router.post("/backup")
16 def manual_backup(current: User = Depends(get_current_admin_user)):
17     """Ручне резервне копіювання."""
18     try:
19         backup_database()        # існуюча функція
20         return {"status": "ok", "timestamp": datetime.utcnow()}
21     except Exception as e:
22         raise HTTPException(status_code=500, detail=str(e))
23 
24 
25 @router.get("/stats")
26 def server_stats(current: User = Depends(get_current_admin_user)):
27     """Повертає аптайм, CPU %, RAM та диск."""
28     uptime = time.time() - START_TIME
29     mem = psutil.virtual_memory()
30     disk = psutil.disk_usage("/")
31     return {
32         "uptime_sec": int(uptime),
33         "cpu_percent": psutil.cpu_percent(interval=0.2),
34         "ram_used_mb": int(mem.used / 1024 / 1024),
35         "ram_total_mb": int(mem.total / 1024 / 1024),
36         "disk_used_gb": round(disk.used / 1024**3, 1),
37         "disk_total_gb": round(disk.total / 1024**3, 1),
38     }

В.5 Адміністрування бізнес-логіки системи. Платформний адміністратор. Мобільна частина

GitHub репозиторій: https://github.com/NureBilozubDanylo/apz-pzpi-22-3-bilozub-danylo/blob/main/Lab4/pzpi-22-3-bilozub-danylo-lab4/ZooShopAndroid/ZooShopAndroid/app/src/main/java/com/example/zooshop/composables/AdminPanelScreen.kt

1 package com.example.zooshop.composables
2 
3 import androidx.compose.foundation.layout.*
4 import androidx.compose.foundation.lazy.LazyColumn
5 import androidx.compose.material.icons.Icons
6 import androidx.compose.material.icons.filled.Menu
7 import androidx.compose.material.icons.filled.Notifications
8 import androidx.compose.material3.*
9 import androidx.compose.runtime.*
10 import androidx.compose.ui.Alignment
11 import androidx.compose.ui.Modifier
12 import androidx.compose.ui.text.font.FontWeight
13 import androidx.compose.ui.text.style.TextAlign
14 import androidx.compose.ui.unit.dp
15 import androidx.lifecycle.ViewModel
16 import androidx.lifecycle.viewModelScope
17 import androidx.navigation.NavController
18 import com.example.zooshop.network.ApiService
19 import dagger.hilt.android.lifecycle.HiltViewModel
20 import kotlinx.coroutines.launch
21 import org.json.JSONArray
22 import org.json.JSONObject
23 import javax.inject.Inject
24 
25 @HiltViewModel
26 class AdminPanelViewModel @Inject constructor(
27     private val api: ApiService
28 ) : ViewModel() {
29 
30     var serverStats by mutableStateOf<List<Pair<String, String>>>(emptyList())
31         private set
32 
33     var dbEntries by mutableStateOf<List<Pair<String, String>>>(emptyList())
34         private set
35 
36     var isLoading by mutableStateOf(true)
37         private set
38 
39     var error by mutableStateOf<String?>(null)
40         private set
41 
42     init { refresh() }
43 
44     fun refresh() {
45         viewModelScope.launch {
46             isLoading = true
47             try {
48                 val sysJson = JSONObject(api.admin_system_status().string())
49                 serverStats = listOf(
50                     "Uptime" to sysJson.optString("uptime"),
51                     "CPU" to "${sysJson.optDouble("cpu", 0.0)}%",
52                     "RAM" to "${sysJson.optInt("ramUsed")}/${sysJson.optInt("ramTotal")} MB",
53                     "Disk" to "${sysJson.optDouble("diskUsed")}/${sysJson.optDouble("diskTotal")} GB"
54                 )
55 
56                 val dbJson = JSONObject(api.admin_db_status().string())
57                 val tables: JSONArray = dbJson.getJSONArray("tables")
58                 dbEntries = (0 until tables.length()).map { i ->
59                     val t = tables.getJSONObject(i)
60                     t.getString("name") to String.format("%.2f", t.getDouble("sizeMb"))
61                 }
62                 error = null
63             } catch (e: Exception) {
64                 error = e.localizedMessage
65             } finally {
66                 isLoading = false
67             }
68         }
69     }
70 }
71 
72 @OptIn(ExperimentalMaterial3Api::class)
73 @Composable
74 fun AdminPanelScreen(
75     navController: NavController,
76     viewModel: AdminPanelViewModel = androidx.hilt.navigation.compose.hiltViewModel()
77 ) {
78     val drawerState = rememberDrawerState(DrawerValue.Closed)
79     val scope = rememberCoroutineScope()
80 
81     val serverStats = viewModel.serverStats
82     val dbEntries = viewModel.dbEntries
83     val isLoading = viewModel.isLoading
84     val error = viewModel.error
85 
86     ModalNavigationDrawer(
87         drawerState = drawerState,
88         drawerContent = {
89             ModalDrawerSheet {
90                 Text(
91                     text = "Menu",
92                     style = MaterialTheme.typography.titleMedium,
93                     modifier = Modifier.padding(16.dp)
94                 )
95                 NavigationDrawerItem(
96                     label = { Text("Shops") },
97                     selected = false,
98                     onClick = {
99                         scope.launch { drawerState.close() }
100                         navController.navigate("shops")
101                     }
102                 )
103                 NavigationDrawerItem(
104                     label = { Text("Animals") },
105                     selected = false,
106                     onClick = {
107                         scope.launch { drawerState.close() }
108                         navController.navigate("animals")
109                     }
110                 )
111                 NavigationDrawerItem(
112                     label = { Text("Sensors") },
113                     selected = false,
114                     onClick = {
115                         scope.launch { drawerState.close() }
116                         navController.navigate("sensors")
117                     }
118                 )
119             }
120         }
121     ) {
122         Scaffold(
123             topBar = {
124                 SmallTopAppBar(
125                     title = {
126                         Text(
127                             text = "ZooHelper",
128                             style = MaterialTheme.typography.titleLarge
129                         )
130                     },
131                     navigationIcon = {
132                         IconButton(onClick = { scope.launch { drawerState.open() } }) {
133                             Icon(Icons.Default.Menu, contentDescription = "Menu")
134                         }
135                     },
136                     actions = {
137                         IconButton(onClick = { navController.navigate("notifications") }) {
138                             Icon(Icons.Default.Notifications, contentDescription = "Notifications")
139                         }
140                     }
141                 )
142             }
143         ) { innerPadding ->
144             when {
145                 isLoading -> {
146                     Box(
147                         Modifier
148                             .fillMaxSize()
149                             .padding(innerPadding),
150                         contentAlignment = Alignment.Center
151                     ) { CircularProgressIndicator() }
152                 }
153                 error != null -> {
154                     Box(
155                         Modifier
156                             .fillMaxSize()
157                             .padding(innerPadding),
158                         contentAlignment = Alignment.Center
159                     ) { Text(error ?: "Unknown error", color = MaterialTheme.colorScheme.error) }
160                 }
161                 else -> {
162                     LazyColumn(
163                         modifier = Modifier
164                             .fillMaxSize()
165                             .padding(innerPadding)
166                             .padding(16.dp),
167                         verticalArrangement = Arrangement.spacedBy(16.dp),
168                         horizontalAlignment = Alignment.Start
169                     ) {
170                         // ─────────────── Page title ───────────────
171                         item {
172                             Text(
173                                 text = "Admin Panel",
174                                 style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.SemiBold)
175                             )
176                         }
177 
178                         // ─────────────── Server stats card ───────────────
179                         if (serverStats.isNotEmpty()) item {
180                             Card(
181                                 modifier = Modifier.fillMaxWidth(),
182                                 shape = MaterialTheme.shapes.medium
183                             ) {
184                                 Column(modifier = Modifier.padding(16.dp)) {
185                                     Text(
186                                         text = "Server stats",
187                                         style = MaterialTheme.typography.titleSmall,
188                                         fontWeight = FontWeight.SemiBold
189                                     )
190                                     Spacer(modifier = Modifier.height(8.dp))
191                                     serverStats.forEach { (label, value) ->
192                                         Row(verticalAlignment = Alignment.CenterVertically) {
193                                             Text("•")
194                                             Spacer(modifier = Modifier.width(6.dp))
195                                             Text("$label: $value")
196                                         }
197                                     }
198                                 }
199                             }
200                         }
201 
202                         // ─────────────── Database card ───────────────
203                         if (dbEntries.isNotEmpty()) item {
204                             Card(
205                                 modifier = Modifier.fillMaxWidth(),
206                                 shape = MaterialTheme.shapes.medium
207                             ) {
208                                 Column(modifier = Modifier.padding(16.dp)) {
209                                     Text(
210                                         text = "Database",
211                                         style = MaterialTheme.typography.titleSmall,
212                                         fontWeight = FontWeight.SemiBold
213                                     )
214                                     Spacer(modifier = Modifier.height(8.dp))
215 
216                                     // Header
217                                     Row(
218                                         modifier = Modifier
219                                             .fillMaxWidth()
220                                             .padding(vertical = 4.dp),
221                                         verticalAlignment = Alignment.CenterVertically
222                                     ) {
223                                         Text(
224                                             text = "Table",
225                                             modifier = Modifier.weight(1f),
226                                             style = MaterialTheme.typography.labelMedium,
227                                             fontWeight = FontWeight.Bold
228                                         )
229                                         Text(
230                                             text = "Size, MB",
231                                             style = MaterialTheme.typography.labelMedium,
232                                             fontWeight = FontWeight.Bold,
233                                             textAlign = TextAlign.End
234                                         )
235                                     }
236                                     Divider()
237 
238                                     dbEntries.forEach { (table, size) ->
239                                         Row(
240                                             modifier = Modifier
241                                                 .fillMaxWidth()
242                                                 .padding(vertical = 4.dp),
243                                             verticalAlignment = Alignment.CenterVertically
244                                         ) {
245                                             Text(
246                                                 text = table,
247                                                 modifier = Modifier.weight(1f)
248                                             )
249                                             Text(
250                                                 text = size,
251                                                 textAlign = TextAlign.End
252                                             )
253                                         }
254                                         Divider()
255                                     }
256                                 }
257                             }
258                         }
259                     }
260                 }
261             }
262         }
263     }
264 }